options {
	STATIC = false;
	//ERROR_REPORTING = true;
	//DEBUG_TOKEN_MANAGER = true;
}

PARSER_BEGIN(Parser)

package br.univali.ttoproject.compiler.parser;

public class Parser {

}

PARSER_END(Parser)

SKIP :
{
  <" ">
| <"\t">
| <"\n">
| <"\r">
|< ":-" (~["\r", "\n"])* >
}

SKIP: { <"/*"> : BLOCK_COMMENT_STATE}
<BLOCK_COMMENT_STATE> SKIP: { "*/" : DEFAULT  }
<BLOCK_COMMENT_STATE> SKIP: { < ~[] > }

<*> TOKEN : { <EOF> {
    if(curLexState == BLOCK_COMMENT_STATE) {
       throw new Error("Unmatched comment at line " + matchedToken.beginLine + ", column " + matchedToken.beginColumn + ".");
    }
  }
}

/* KEY WORDS */
TOKEN [IGNORE_CASE]:
{
  <PROGRAM: "program">
| <DEFINE: "define">
| <NOT: "not">
| <VARIABLE: "variable">
| <IS: "is">
| <NATURAL: "natural">
| <REAL: "real">
| <CHAR: "char">
| <BOOLEAN: "boolean">
| <EXECUTE: "execute">
| <SET: "set">
| <TO: "to">
| <GET: "get">
| <PUT: "put">
| <VERIFY: "verify">
| <TRUE: "true">
| <FALSE: "false">
| <LOOP: "loop">
| <WHILE: "while">
| <DO: "do">
}

/* SPECIAL SYMBOLS */
TOKEN :
{
  <LBRACE: "{">
| <RBRACE: "}">
| <PARENTHESESL: "(">
| <PARANTHESESR: ")">
| <DOT: ".">
| <COMMA: ",">
| <PLUS: "+">
| <MINUS: "-">
| <POWER: "**">
| <MULTIPLICATION: "*">
| <DIVISION: "/">
| <INTEGER_DIVISION: "%">
| <REST: "%%">
| <EQUAL: "==">
| <DIFFERENT: "!=">
| <SMALLER: "<">
| <LARGER: ">">
| <SMALLER_EQUAL: "<=">
| <LARGER_EQUAL: ">=">
| <AND: "&">
| <OR: "|">
| <NOT_SYMBOL: "!">
}

/* IDENTIFIERS */
TOKEN :
{
    <IDENTIFIER: ("_"|<LETTER>) ("_"|<LETTER>|<UNSIGNED>)+>
}

/* CONSTS */
TOKEN :
{
    <CHAR_CONST : "\"" ((~["\"","\\","\n","\r"]) |("\\" (["n","t","v","b","r","f","a","\\","?","'","\""])))* "\"">
|   <NATURAL_CONST: <UNSIGNED>|<SIGNED>>
|   <REAL_CONST: <REAL_SIGNED>|<REAL_UNSIGNED>>
|   <BOOLEAN_CONST: "true"|"false">
}

TOKEN :
{
    <LETTER: ["a"-"z","A"-"Z"]>
|   <UNSIGNED: (["0" - "9"])+>
|   <SIGNED: ("-"|"+") (["0" - "9"])+>
|   <REAL_UNSIGNED: <UNSIGNED>"."<UNSIGNED>>
|   <REAL_SIGNED: <SIGNED>"."<UNSIGNED>>
}

<*> TOKEN : { <UNKNOWN: ~[]> }
