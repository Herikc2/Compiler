options {
	STATIC = false;
	//ERROR_REPORTING = true;
	//DEBUG_TOKEN_MANAGER = true;
}

PARSER_BEGIN(Parser)

package br.univali.ttoproject.compiler.parser;

public class Parser {

}

PARSER_END(Parser)

SKIP :
{
  <" ">
| <"\t">
| <"\n">
| <"\r">
| <"//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
}

SKIP: { <"/*"> : BLOCK_COMMENT_STATE}
<BLOCK_COMMENT_STATE> SKIP: { "*/" : DEFAULT  }
<BLOCK_COMMENT_STATE> SKIP: { < ~[] > }

<*> TOKEN :
{
    <EOF>
    {
        if(curLexState == BLOCK_COMMENT_STATE) {
            throw new Error("Unmatched comment at line " + matchedToken.beginLine + ", column " + matchedToken.beginColumn + ".");
        }
    }
}

/* KEY WORDS */
TOKEN [IGNORE_CASE]:
{
  <PROGRAM: "program">
| <DEFINE: "define">
| <NOT: "not">
| <VARIABLE: "variable">
| <IS: "is">
| <NATURAL_TYPE: "natural">
| <REAL_TYPE: "real">
| <CHAR_TYPE: "char">
| <BOOLEAN_TYPE: "boolean">
| <EXECUTE: "execute">
| <SET: "set">
| <TO: "to">
| <GET: "get">
| <PUT: "put">
| <VERIFY: "verify">
| <LOOP: "loop">
| <WHILE: "while">
| <DO: "do">
}

/* SPECIAL SYMBOLS */
TOKEN :
{
  <HEADERSYMBOL: ":-">
| <LBRACE: "{">
| <RBRACE: "}">
| <LBRACKET: "[">
| <RBRACKET: "]">
| <PARENTHESESL: "(">
| <PARANTHESESR: ")">
| <DOT: ".">
| <COMMA: ",">
| <PLUS: "+">
| <MINUS: "-">
| <POWER: "**">
| <MULTIPLICATION: "*">
| <DIVISION: "/">
| <INTEGER_DIVISION: "%">
| <REST: "%%">
| <EQUAL: "==">
| <DIFFERENT: "!=">
| <SMALLER: "<">
| <LARGER: ">">
| <SMALLER_EQUAL: "<=">
| <LARGER_EQUAL: ">=">
| <AND: "&">
| <OR: "|">
| <NOT_SYMBOL: "!">
}

/* CONSTS */
TOKEN :
{
    <CHAR_CONST: "\"" ((~["\"","\\","\n","\r"])|("\\"(["n","t","v","b","r","f","a","\\","?","'","\""])))* "\""
               | "\'" ((~["\"","\\","\n","\r"])|("\\"(["n","t","v","b","r","f","a","\\","?","'","\""])))* "\'">
|   <NATURAL_CONST: <DIGIT> (<DIGIT>)? (<DIGIT>)?>
|   <REAL_CONST: <DIGIT> (<DIGIT>)? (<DIGIT>)? (<DIGIT>)? (<DIGIT>)?  "." <DIGIT> (<DIGIT>)?>
|   <BOOLEAN_CONST: "true" | "false">
}

TOKEN :
{
    <LETTER: ["a"-"z","A"-"Z"]>
|   <DIGIT: ["0"-"9"]>
}

TOKEN :
{
    <HEADER: <HEADERSYMBOL> (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
|   <IDENTIFIER: "_"|(("_"<NU>|<LETTER>)(<LETTER>|<DIGIT><ND>|"_"<NU>)*((<LETTER>|<DIGIT>)"_")?)>
|   <NU: <LETTER>|<DIGIT><ND>>
|   <ND: <LETTER>|"_">
}

<*> TOKEN : { <UNKNOWN: ~[]> }

String Program() :
{ String result = ""; }
{
  (<HEADER>)? <PROGRAM> <LBRACE> Test() <RBRACE> (<IDENTIFIER>)? <EOF>
  { return result; }
}

void Test() :
{}
{
    (<IDENTIFIER>)?
}
