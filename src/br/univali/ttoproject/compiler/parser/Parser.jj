options {
	STATIC = false;
	//ERROR_REPORTING = true;
	//DEBUG_TOKEN_MANAGER = true;
}

PARSER_BEGIN(Parser)

package br.univali.ttoproject.compiler.parser;


import br.univali.ttoproject.compiler.*;
import br.univali.ttoproject.vm.*;
import java.util.ArrayList;

public class Parser {
    public String errorMessages = "";
    public ArrayList<Instruction<Integer, Object>> program = new ArrayList<>();
    private SemanticAnalysis semanticAnalysis = new SemanticAnalysis();
}

PARSER_END(Parser)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| <"//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
}

SKIP: { "/*" : BLOCK_COMMENT_STATE}
<BLOCK_COMMENT_STATE> SKIP: { "*/" : DEFAULT  }
<BLOCK_COMMENT_STATE> SKIP: { < ~[] > }

<*> TOKEN :
{
    <EOF>
    {
        if (curLexState == BLOCK_COMMENT_STATE) {
            throw new Error("Unmatched comment at line " + matchedToken.beginLine + ", column " + matchedToken.beginColumn + ".");
        }
    }
}

/* KEY WORDS */
TOKEN [IGNORE_CASE]:
{
    <PROGRAM: "program">
|   <DEFINE: "define">
|   <NOT: "not">
|   <VARIABLE: "variable">
|   <IS: "is">
|   <NATURAL_TYPE: "natural">
|   <REAL_TYPE: "real">
|   <CHAR_TYPE: "char">
|   <BOOLEAN_TYPE: "boolean">
|   <EXECUTE: "execute">
|   <SET: "set">
|   <TO: "to">
|   <GET: "get">
|   <PUT: "put">
|   <VERIFY: "verify">
|   <LOOP: "loop">
|   <WHILE: "while">
|   <DO: "do">
}

/* SPECIAL SYMBOLS */
TOKEN :
{
    <HEADER: ":-">
|   <LBRACE: "{">
|   <RBRACE: "}">
|   <LBRACKET: "[">
|   <RBRACKET: "]">
|   <LPARENTHESES: "(">
|   <RPARANTHESES: ")">
|   <DOT: ".">
|   <COMMA: ",">
|   <PLUS: "+">
|   <MINUS: "-">
|   <POWER: "**">
|   <MULTIPLICATION: "*">
|   <DIVISION: "/">
|   <INTEGER_DIVISION: "%">
|   <REST: "%%">
|   <EQUAL: "==">
|   <DIFFERENT: "!=">
|   <SMALLER: "<">
|   <GREATER: ">">
|   <SMALLER_EQUAL: "<=">
|   <GREATER_EQUAL: ">=">
|   <AND: "&">
|   <OR: "|">
|   <NOT_SYMBOL: "!">
}

/* CONSTS AND IDENTIFIER */
TOKEN :
{
    <CHAR_CONST: "\"" (~["\"","\\","\n","\r"] | "\\"(["n","t","b","r","\\","'","\""]))* "\""
               | "\'" (~["\'","\\","\n","\r"] | "\\"(["n","t","b","r","\\","'","\""]))* "\'">
|   <NATURAL_CONST: <DIGIT> (<DIGIT>)? (<DIGIT>)?>
|   <REAL_CONST: <DIGIT> (<DIGIT>)? (<DIGIT>)? (<DIGIT>)? (<DIGIT>)?  "." <DIGIT> (<DIGIT>)?>
|   <TRUE: "true">
|   <FALSE: "false">
|   <IDENTIFIER: <ND>|(("_"<NU>|<LETTER>) (<NU>|"_"<NU>)* (<LETTER>|<DIGIT><ND>|<LETTER>"_"|"_"<LETTER>|"_"))>
}

/* RAW */
TOKEN :
{
    <LETTER: ["a"-"z","A"-"Z"]>
|   <DIGIT: ["0"-"9"]>
|   <NU: <LETTER>|<DIGIT><ND>>
|   <ND: <LETTER>|"_">
}

<*> TOKEN : { <UNKNOWN: ~[" ","\t","\n","\r"]> }



void Start() :
{}
{
    Program() <EOF>
    {
        program = semanticAnalysis.getProgram();
    }
}

void Program() :
{}
{
    Comment() <PROGRAM> <LBRACE> VarAndConstDecl() ProgramBody() <RBRACE> ProgramIdentifier()
}

void Comment() :
{}
{
    <HEADER> <CHAR_CONST>
|   Epsilon()
}

void ProgramIdentifier() :
{}
{
    <IDENTIFIER>
|   Epsilon()
}

void VarAndConstDecl() :
{}
{
    <DEFINE> <LBRACE> ConstsAndVars() <RBRACE>
|   Epsilon()
}

void ConstsAndVars() :
{}
{
    ConstDecl() Vars2()
|   VarDecl() Consts2()
}

void ConstsDecl() :
{}
{
    <NOT> <VARIABLE> Consts()
}

void Consts() :
{}
{
    Type() <IS> IdentifierConstList() Value() <DOT> Consts1()
}

void Consts1() :
{}
{
    Consts()
|   Epsilon()
}

void Consts2() :
{}
{
    ConstsDecl()
|   Epsilon()
}

void VarsDecl() :
{}
{
    <VARIABLE> Vars()
}

void Vars() :
{}
{
    Type() <IS> IdentifierVarList() <DOT> Vars1()
}

void Vars1() :
{}
{
    Vars()
|   Epsilon()
}

void Vars2() :
{}
{
    VarsDecl()
|   Epsilon()
}

void Type() :
{}
{
    <CHAR_TYPE>
|   <NATURAL_TYPE>
|   <REAL_TYPE>
|   <BOOLEAN_TYPE>
}

void IdentifierConstList() :
{}
{
    <IDENTIFIER> IdentifierConstList1()
}

void IdentifierConstList1() :
{}
{
    <COMMA> IdentifierConstList()
|   Epsilon()
}

void IdentifierVarList() :
{}
{
    <IDENTIFIER> Index() IdentifierVarList1()
}

void IdentifierVarList1() :
{}
{
    <COMMA> IdentifierVarList()
|   Epsilon()
}

void Index() :
{}
{
    <LBRACKET> <NATURAL_CONST> <RBRACKET>
|   Epsilon()
}

void Value() :
{}
{
    <CHAR_CONST>
|   <NATURAL_CONST>
|   <REAL_CONST>
|   <TRUE>
|   <FALSE>
}

void ProgramBody() :
{}
{
    <EXECUTE> <LBRACE> CommandList() <RBRACE>
}

void CommandList() :
{}
{
    Command() <DOT> CommandList1()
}

void CommandList1() :
{}
{
    CommandList()
|   Epsilon()
}

void Command() :
{}
{
    Attribuition()
|   Input()
|   Output()
|   Selection()
|   Loop()
}

void Attribuition() :
{}
{
    <SET> Expression() <TO> IdentifierVarList()
}

void Input() :
{}
{
    <GET> <LBRACE> IdentifierList() <RBRACE>
}





void Expression() :
{}
{
    ExprArithLogic() ExpressionSel()
}

void ExpressionSel() :
{}
{
    <EQUAL> ExprArithLogic()
|   <DIFFERENT> ExprArithLogic()
|   <SMALLER> ExprArithLogic()
|   <GREATER> ExprArithLogic()
|   <SMALLER_EQUAL> ExprArithLogic()
|   <GREATER_EQUAL> ExprArithLogic()
|   Epsilon()
}

void ExprArithLogic() :
{}
{
    Term2() LessPriority()
}

void LessPriority() :
{}
{
    <PLUS> Term2() LessPriority()
|   <MINUS> Term2() LessPriority()
|   <OR> Term2() LessPriority()
|   Epsilon()
}

void Term2() :
{}
{
    Term1() MidPriority()
}

void MidPriority() :
{}
{
    <MULTIPLICATION> Term1() MidPriority()
|   <DIVISION> Term1() MidPriority()
|   <INTEGER_DIVISION> Term1() MidPriority()
|   <REST> Term1() MidPriority()
|   <AND> Term1() MidPriority()
|   Epsilon()
}

void Term1() :
{}
{
    Element() GreatPriority()
}

void GreatPriority() :
{}
{
    <POWER> Element() GreatPriority()
|   Epsilon()
}

void Element() :
{}
{
    <IDENTIFIER> Index()
|   Value()
|   <LPARENTHESES> Expression() <RPARANTHESES>
|   <NOT> <LPARENTHESES> Expression() <RPARANTHESES>
}

void Epsilon() : {}
{
     {}
}

