options {
	STATIC = false;
	//ERROR_REPORTING = true;
	//DEBUG_TOKEN_MANAGER = true;
}

PARSER_BEGIN(Parser)

package br.univali.ttoproject.compiler.parser;

public class Parser {
    public String errorMessages = "";
}

PARSER_END(Parser)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| <"//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
}

SKIP: { "/*" : BLOCK_COMMENT_STATE}
<BLOCK_COMMENT_STATE> SKIP: { "*/" : DEFAULT  }
<BLOCK_COMMENT_STATE> SKIP: { < ~[] > }

<*> TOKEN :
{
    <EOF>
    {
        if (curLexState == BLOCK_COMMENT_STATE) {
            throw new Error("Unmatched comment at line " + matchedToken.beginLine + ", column " + matchedToken.beginColumn + ".");
        }
    }
}

/* KEY WORDS */
TOKEN [IGNORE_CASE]:
{
    <PROGRAM: "program">
|   <DEFINE: "define">
|   <NOT: "not">
|   <VARIABLE: "variable">
|   <IS: "is">
|   <NATURAL_TYPE: "natural">
|   <REAL_TYPE: "real">
|   <CHAR_TYPE: "char">
|   <BOOLEAN_TYPE: "boolean">
|   <EXECUTE: "execute">
|   <SET: "set">
|   <TO: "to">
|   <GET: "get">
|   <PUT: "put">
|   <VERIFY: "verify">
|   <LOOP: "loop">
|   <WHILE: "while">
|   <DO: "do">
}

/* SPECIAL SYMBOLS */
TOKEN :
{
    <HEADER: ":-">
|   <LBRACE: "{">
|   <RBRACE: "}">
|   <LBRACKET: "[">
|   <RBRACKET: "]">
|   <LPARENTHESES: "(">
|   <RPARANTHESES: ")">
|   <DOT: ".">
|   <COMMA: ",">
|   <PLUS: "+">
|   <MINUS: "-">
|   <POWER: "**">
|   <MULTIPLICATION: "*">
|   <DIVISION: "/">
|   <INTEGER_DIVISION: "%">
|   <REST: "%%">
|   <EQUAL: "==">
|   <DIFFERENT: "!=">
|   <SMALLER: "<">
|   <GREATER: ">">
|   <SMALLER_EQUAL: "<=">
|   <GREATER_EQUAL: ">=">
|   <AND: "&">
|   <OR: "|">
|   <NOT_SYMBOL: "!">
}

/* CONSTS */
TOKEN :
{
    <CHAR_CONST: "\"" (~["\"","\\","\n","\r"] | "\\"(["n","t","b","r","\\","'","\""]))* "\""
               | "\'" (~["\'","\\","\n","\r"] | "\\"(["n","t","b","r","\\","'","\""]))* "\'">
|   <NATURAL_CONST: <DIGIT> (<DIGIT>)? (<DIGIT>)?>
|   <REAL_CONST: <DIGIT> (<DIGIT>)? (<DIGIT>)? (<DIGIT>)? (<DIGIT>)?  "." <DIGIT> (<DIGIT>)?>
|   <TRUE: "true">
|   <FALSE: "false">
}

/* RAW */
TOKEN :
{
    <LETTER: ["a"-"z","A"-"Z"]>
|   <DIGIT: ["0"-"9"]>
}

/* LITERALS */
TOKEN :
{
    <HEADER_COMMENT: <HEADER> (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
|   <IDENTIFIER: ("_"|<LETTER>)|(("_"<NU>|<LETTER>)(<NU>|"_"<NU>)* (<LETTER>|<DIGIT>("_"|<LETTER>)|<LETTER>"_"))>
|   <NU: <LETTER>|<DIGIT><ND>>
|   <ND: <LETTER>|"_">
}

<*> TOKEN : { <UNKNOWN: ~[" ","\t","\n","\r"]> }



void Start() :
{}
{
    Program() <EOF>
}

void Program() :
{}
{
    HeaderSel()
    try {
        <PROGRAM>
    } catch (ParseException e) {
        token = getNextToken();
        if (token.kind != EOF)
            errorMessages += "Unexpected token '" + token.image + "' at line " + token.beginLine + ", column " + token.beginColumn + ". "
                           + "Expected: 'program'.\n";
    }
    try {
        <LBRACE>
    } catch (ParseException e) {
        token = getNextToken();
        if (token.kind != EOF)
            errorMessages += "Unexpected token '" + token.image + "' at line " + token.beginLine + ", column " + token.beginColumn + ". "
                           + "Expected: '{'.\n";
    }
    Define() Execute()
    try {
        <RBRACE>
    } catch (ParseException e) {
        token = getNextToken();
        if (token.kind != EOF)
            errorMessages += "Unexpected token '" + token.image + "' at line " + token.beginLine + ", column " + token.beginColumn + ". "
                           + "Expected: '}'.\n";
    }
    IdentifierSel()
}

void HeaderSel() :
{}
{
    <HEADER_COMMENT>
|   Epsilon()
}

void IdentifierSel() :
{}
{
    <IDENTIFIER>
|   Epsilon()
}

void Define() :
{}
{
    <DEFINE> <LBRACE> VariableBlock() <RBRACE>
|   Epsilon()
}

void VariableBlock() :
{}
{
    NotVariable() VariableSel1()
|   Variable() VariableSel2()
|   Epsilon()
}

void VariableSel1() :
{}
{
    Variable()
|   Epsilon()
}

void VariableSel2() :
{}
{
    NotVariable()
|   Epsilon()
}

void Execute() :
{}
{
    try {
        <EXECUTE>
    } catch (ParseException e) {
        token = getNextToken();
        if (token.kind != EOF)
            errorMessages += "Unexpected token '" + token.image + "' at line " + token.beginLine + ", column " + token.beginColumn + ". "
                           + "Expected: 'execute'.\n";
    }
    CommandBlock()
}

void NotVariable() :
{}
{
    try {
        <NOT>
    } catch (ParseException e) {
        token = getNextToken();
        if (token.kind != EOF)
            errorMessages += "Unexpected token '" + token.image + "' at line " + token.beginLine + ", column " + token.beginColumn + ". "
                           + "Expected: 'not'.\n";
    }

    try {
        <VARIABLE>
    } catch (ParseException e) {
        token = getNextToken();
        if (token.kind != EOF)
            errorMessages += "Unexpected token '" + token.image + "' at line " + token.beginLine + ", column " + token.beginColumn + ". "
                           + "Expected: 'variable'.\n";
    }
    NotVariableDecl() NotVariableSel()
}

void NotVariableSel() :
{}
{
    NotVariableDecl() NotVariableSel()
|   Epsilon()
}

void NotVariableDecl() :
{}
{
    Type()
     try {
         <IS>
     } catch (ParseException e) {
         token = getNextToken();
         if (token.kind != EOF)
             errorMessages += "Unexpected token '" + token.image + "' at line " + token.beginLine + ", column " + token.beginColumn + ". "
                            + "Expected: 'is'.\n";
     }
     IdentifierListValue()
}

void IdentifierListValue() :
{}
{
    try {
        <IDENTIFIER>
    } catch (ParseException e) {
        token = getNextToken();
        if (token.kind != EOF)
            errorMessages += "Unexpected token '" + token.image + "' at line " + token.beginLine + ", column " + token.beginColumn + ". "
                           + "Expected an identifier.\n";
    }
    Value() IdentifierListValue1()
}

void IdentifierListValue1() :
{}
{
    <COMMA> IdentifierListValue()
|   Epsilon()
}

void Variable() :
{}
{
    try {
        <VARIABLE>
    } catch (ParseException e) {
        token = getNextToken();
        if (token.kind != EOF)
            errorMessages += "Unexpected token '" + token.image + "' at line " + token.beginLine + ", column " + token.beginColumn + ". "
                           + "Expected: 'variable'.\n";
    }
    VariableDecl() VariableSel()
}

void VariableSel() :
{}
{
    VariableDecl() VariableSel()
|   Epsilon()
}

void VariableDecl() :
{}
{
    Type()
    try {
        <IS>
    } catch (ParseException e) {
        token = getNextToken();
        if (token.kind != EOF)
            errorMessages += "Unexpected token '" + token.image + "' at line " + token.beginLine + ", column " + token.beginColumn + ". "
                           + "Expected: 'is'.\n";
    }
     IdentifierList()
    try {
        <DOT>
    } catch (ParseException e) {
        token = getNextToken();
        if (token.kind != EOF)
            errorMessages += "Unexpected token '" + token.image + "' at line " + token.beginLine + ", column " + token.beginColumn + ". "
                           + "Expected: '.'.\n";
    }
}

void IdentifierList() :
{}
{
    try {
        <IDENTIFIER>
    } catch (ParseException e) {
        token = getNextToken();
        if (token.kind != EOF)
            errorMessages += "Unexpected token '" + token.image + "' at line " + token.beginLine + ", column " + token.beginColumn + ". "
                           + "Expected an identifier.\n";
    }
    Index() IdentifierList1()
}

void IdentifierList1() :
{}
{
    <COMMA> IdentifierList()
|   Epsilon()
}

void Set() :
{}
{
    try {
        <SET>
    } catch (ParseException e) {
        token = getNextToken();
        if (token.kind != EOF)
            errorMessages += "Unexpected token '" + token.image + "' at line " + token.beginLine + ", column " + token.beginColumn + ". "
                           + "Expected: 'set'.\n";
    }
    Expression()
    try {
        <TO>
    } catch (ParseException e) {
        token = getNextToken();
        if (token.kind != EOF)
            errorMessages += "Unexpected token '" + token.image + "' at line " + token.beginLine + ", column " + token.beginColumn + ". "
                           + "Expected: 'to'.\n";
    }
    IdentifierList()
}

void Get() :
{}
{
    try {
        <GET>
    } catch (ParseException e) {
        token = getNextToken();
        if (token.kind != EOF)
            errorMessages += "Unexpected token '" + token.image + "' at line " + token.beginLine + ", column " + token.beginColumn + ". "
                           + "Expected: 'get'.\n";
    }
    try {
        <LBRACE>
    } catch (ParseException e) {
        token = getNextToken();
        if (token.kind != EOF)
            errorMessages += "Unexpected token '" + token.image + "' at line " + token.beginLine + ", column " + token.beginColumn + ". "
                           + "Expected: '{'.\n";
    }
    IdentifierList()
    try {
        <RBRACE>
    } catch (ParseException e) {
        token = getNextToken();
        if (token.kind != EOF)
            errorMessages += "Unexpected token '" + token.image + "' at line " + token.beginLine + ", column " + token.beginColumn + ". "
                           + "Expected: '}'.\n";
    }
}

void Put() :
{}
{
    try {
        <PUT>
    } catch (ParseException e) {
        token = getNextToken();
        if (token.kind != EOF)
            errorMessages += "Unexpected token '" + token.image + "' at line " + token.beginLine + ", column " + token.beginColumn + ". "
                           + "Expected: 'put'.\n";
    }
    try {
        <LBRACE>
    } catch (ParseException e) {
        token = getNextToken();
        if (token.kind != EOF)
            errorMessages += "Unexpected token '" + token.image + "' at line " + token.beginLine + ", column " + token.beginColumn + ". "
                           + "Expected: '{'.\n";
    }
    PutList()
    try {
        <RBRACE>
    } catch (ParseException e) {
        token = getNextToken();
        if (token.kind != EOF)
            errorMessages += "Unexpected token '" + token.image + "' at line " + token.beginLine + ", column " + token.beginColumn + ". "
                           + "Expected: '}'.\n";
    }
}

void PutList() :
{}
{
    IdentifierList()
|   Value()
}

void Verify() :
{}
{
    try {
        <VERIFY>
    } catch (ParseException e) {
        token = getNextToken();
        if (token.kind != EOF)
            errorMessages += "Unexpected token '" + token.image + "' at line " + token.beginLine + ", column " + token.beginColumn + ". "
                           + "Expected: 'verify'.\n";
    }
    Expression()
    try {
        <IS>
    } catch (ParseException e) {
        token = getNextToken();
        if (token.kind != EOF)
            errorMessages += "Unexpected token '" + token.image + "' at line " + token.beginLine + ", column " + token.beginColumn + ". "
                           + "Expected: 'is'.\n";
    }
    FalseTrueSel()
}

void FalseTrueSel() :
{}
{
    TrueBlock() FalseTrueSel1()
|   FalseBlock() FalseTrueSel2()
}

void FalseTrueSel1() :
{}
{
    FalseBlock()
|   Epsilon()
}

void FalseTrueSel2() :
{}
{
    TrueBlock()
|   Epsilon()
}

void TrueBlock() :
{}
{
    try {
        <TRUE>
    } catch (ParseException e) {
        token = getNextToken();
        if (token.kind != EOF)
            errorMessages += "Unexpected token '" + token.image + "' at line " + token.beginLine + ", column " + token.beginColumn + ". "
                           + "Expected: 'true'.\n";
    }
    CommandBlock()
}

void FalseBlock() :
{}
{
    try {
        <FALSE>
    } catch (ParseException e) {
        token = getNextToken();
        if (token.kind != EOF)
            errorMessages += "Unexpected token '" + token.image + "' at line " + token.beginLine + ", column " + token.beginColumn + ". "
                           + "Expected: 'false'.\n";
    }
    CommandBlock()
}

void Loop() :
{}
{
    try {
        <LOOP>
    } catch (ParseException e) {
        token = getNextToken();
        if (token.kind != EOF)
            errorMessages += "Unexpected token '" + token.image + "' at line " + token.beginLine + ", column " + token.beginColumn + ". "
                           + "Expected: 'loop'.\n";
    }
    CommandBlock()
    try {
        <WHILE>
    } catch (ParseException e) {
        token = getNextToken();
        if (token.kind != EOF)
            errorMessages += "Unexpected token '" + token.image + "' at line " + token.beginLine + ", column " + token.beginColumn + ". "
                           + "Expected: 'while'.\n";
    }
    Expression()
    try {
        <IS>
    } catch (ParseException e) {
        token = getNextToken();
        if (token.kind != EOF)
            errorMessages += "Unexpected token '" + token.image + "' at line " + token.beginLine + ", column " + token.beginColumn + ". "
                           + "Expected: 'is'.\n";
    }
    try {
        <TRUE>
    } catch (ParseException e) {
        token = getNextToken();
        if (token.kind != EOF)
            errorMessages += "Unexpected token '" + token.image + "' at line " + token.beginLine + ", column " + token.beginColumn + ". "
                           + "Expected: 'true'.\n";
    }
}

void While() :
{}
{
    try {
        <WHILE>
    } catch (ParseException e) {
        token = getNextToken();
        if (token.kind != EOF)
            errorMessages += "Unexpected token '" + token.image + "' at line " + token.beginLine + ", column " + token.beginColumn + ". "
                           + "Expected: 'while'.\n";
    }
    Expression()
    try {
        <IS>
    } catch (ParseException e) {
        token = getNextToken();
        if (token.kind != EOF)
            errorMessages += "Unexpected token '" + token.image + "' at line " + token.beginLine + ", column " + token.beginColumn + ". "
                           + "Expected: 'is'.\n";
    }
    try {
        <TRUE>
    } catch (ParseException e) {
        token = getNextToken();
        if (token.kind != EOF)
            errorMessages += "Unexpected token '" + token.image + "' at line " + token.beginLine + ", column " + token.beginColumn + ". "
                           + "Expected: 'true'.\n";
    }
    try {
        <DO>
    } catch (ParseException e) {
        token = getNextToken();
        if (token.kind != EOF)
            errorMessages += "Unexpected token '" + token.image + "' at line " + token.beginLine + ", column " + token.beginColumn + ". "
                           + "Expected: 'do'.\n";
    }
    CommandBlock()
}

void CommandBlock() :
{}
{
    try {
        <LBRACE>
    } catch (ParseException e) {
        token = getNextToken();
        if (token.kind != EOF)
            errorMessages += "Unexpected token '" + token.image + "' at line " + token.beginLine + ", column " + token.beginColumn + ". "
                           + "Expected: '{'.\n";
    }
    try {
        Command() CommandList()
    } catch (ParseException e) {
        token = getNextToken();
        if (token.kind != EOF)
            errorMessages += "Unexpected token '" + token.image + "' at line " + token.beginLine + ", column " + token.beginColumn + ". "
                           + "Expected a command.\n";
    }
    try {
        <RBRACE>
    } catch (ParseException e) {
        token = getNextToken();
        if (token.kind != EOF)
            errorMessages += "Unexpected token '" + token.image + "' at line " + token.beginLine + ", column " + token.beginColumn + ". "
                           + "Expected: '}'.\n";
    }
}

void CommandList() :
{}
{
    Command() CommandList()
|   Epsilon()
}

void Command() :
{}
{
    CommandSel()
    try {
        <DOT>
    } catch (ParseException e) {
        token = getNextToken();
        if (token.kind != EOF)
            errorMessages += "Unexpected token '" + token.image + "' at line " + token.beginLine + ", column " + token.beginColumn + ". "
                           + "Expected: '.'.\n";
    }
}

void CommandSel() :
{}
{
    Set()
|   Get()
|   Put()
|   Verify()
|   Loop()
|   While()
}

void Expression() :
{}
{
    try {
        ExprArithLogic() ExpressionSel()
    } catch (ParseException e) {
        token = getNextToken();
        if (token.kind != EOF)
            errorMessages += "Invalid expression encountered at line " + token.beginLine + ", column " + token.beginColumn + ".\n";
    }
}

void ExpressionSel() :
{}
{
    <EQUAL> ExprArithLogic()
|   <DIFFERENT> ExprArithLogic()
|   <SMALLER> ExprArithLogic()
|   <GREATER> ExprArithLogic()
|   <SMALLER_EQUAL> ExprArithLogic()
|   <GREATER_EQUAL> ExprArithLogic()
|   Epsilon()
}

void ExprArithLogic() :
{}
{
    Term2() LessPriority()
}

void LessPriority() :
{}
{
    <PLUS> Term2() LessPriority()
|   <MINUS> Term2() LessPriority()
|   <OR> Term2() LessPriority()
|   Epsilon()
}

void Term2() :
{}
{
    Term1() MidPriority()
}

void MidPriority() :
{}
{
    <MULTIPLICATION> Term1() MidPriority()
|   <DIVISION> Term1() MidPriority()
|   <INTEGER_DIVISION> Term1() MidPriority()
|   <REST> Term1() MidPriority()
|   <AND> Term1() MidPriority()
|   Epsilon()
}

void Term1() :
{}
{
    Element() GreatPriority()
}

void GreatPriority() :
{}
{
    <POWER> Element() GreatPriority()
|   Epsilon()
}

void Element() :
{}
{
    <IDENTIFIER> Index()
|   Value()
|   <LPARENTHESES> Expression() <RPARANTHESES>
|   <NOT> <LPARENTHESES> Expression() <RPARANTHESES>
}

void Index() :
{}
{
    <LBRACKET> <NATURAL_CONST> <RBRACKET>
|   Epsilon()
}

void Value() :
{}
{
    try {
        <CHAR_CONST>
    |   <NATURAL_CONST>
    |   <REAL_CONST>
    |   <TRUE>
    |   <FALSE>
    } catch (ParseException e) {
        token = getNextToken();
        if (token.kind != EOF)
            errorMessages += "Unexpected token '" + token.image + "' at line " + token.beginLine + ", column " + token.beginColumn + ". "
                           + "Expected a constant value (char, natural, real or boolean).\n";
    }
}

void Type() :
{}
{
    try {
        <CHAR_TYPE>
    |   <NATURAL_TYPE>
    |   <REAL_TYPE>
    |   <BOOLEAN_TYPE>
    } catch (ParseException e) {
        token = getNextToken();
        if (token.kind != EOF)
            errorMessages += "Unexpected token '" + token.image + "' at line " + token.beginLine + ", column " + token.beginColumn + ". "
                           + "Expected: 'char', 'natural', 'real' or 'boolean'.\n";
    }
}

void Epsilon() : {}
{
     {}
}
