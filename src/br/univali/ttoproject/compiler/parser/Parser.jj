options {
	STATIC = false;
	//ERROR_REPORTING = true;
	//DEBUG_TOKEN_MANAGER = true;
}

PARSER_BEGIN(Parser)

package br.univali.ttoproject.compiler.parser;

public class Parser {
    public String errorMessages = "";
}

PARSER_END(Parser)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| <"//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
}

SKIP: { "/*" : BLOCK_COMMENT_STATE}
<BLOCK_COMMENT_STATE> SKIP: { "*/" : DEFAULT  }
<BLOCK_COMMENT_STATE> SKIP: { < ~[] > }

<*> TOKEN :
{
    <EOF>
    {
        if (curLexState == BLOCK_COMMENT_STATE) {
            throw new Error("Unmatched comment at line " + matchedToken.beginLine + ", column " + matchedToken.beginColumn + ".");
        }
    }
}

/* KEY WORDS */
TOKEN [IGNORE_CASE]:
{
    <PROGRAM: "program">
|   <DEFINE: "define">
|   <NOT: "not">
|   <VARIABLE: "variable">
|   <IS: "is">
|   <NATURAL_TYPE: "natural">
|   <REAL_TYPE: "real">
|   <CHAR_TYPE: "char">
|   <BOOLEAN_TYPE: "boolean">
|   <EXECUTE: "execute">
|   <SET: "set">
|   <TO: "to">
|   <GET: "get">
|   <PUT: "put">
|   <VERIFY: "verify">
|   <LOOP: "loop">
|   <WHILE: "while">
|   <DO: "do">
}

/* SPECIAL SYMBOLS */
TOKEN :
{
    <HEADER: ":-">
|   <LBRACE: "{">
|   <RBRACE: "}">
|   <LBRACKET: "[">
|   <RBRACKET: "]">
|   <LPARENTHESES: "(">
|   <RPARANTHESES: ")">
|   <DOT: ".">
|   <COMMA: ",">
|   <PLUS: "+">
|   <MINUS: "-">
|   <POWER: "**">
|   <MULTIPLICATION: "*">
|   <DIVISION: "/">
|   <INTEGER_DIVISION: "%">
|   <REST: "%%">
|   <EQUAL: "==">
|   <DIFFERENT: "!=">
|   <SMALLER: "<">
|   <GREATER: ">">
|   <SMALLER_EQUAL: "<=">
|   <GREATER_EQUAL: ">=">
|   <AND: "&">
|   <OR: "|">
|   <NOT_SYMBOL: "!">
}

/* CONSTS */
TOKEN :
{
    <CHAR_CONST: "\"" (~["\"","\\","\n","\r"] | "\\"(["n","t","b","r","\\","'","\""]))* "\""
               | "\'" (~["\'","\\","\n","\r"] | "\\"(["n","t","b","r","\\","'","\""]))* "\'">
|   <NATURAL_CONST: <DIGIT> (<DIGIT>)? (<DIGIT>)?>
|   <REAL_CONST: <DIGIT> (<DIGIT>)? (<DIGIT>)? (<DIGIT>)? (<DIGIT>)?  "." <DIGIT> (<DIGIT>)?>
|   <BOOLEAN_CONST: <TRUE> | <FALSE>>
}

/* RAW */
TOKEN :
{
    <LETTER: ["a"-"z","A"-"Z"]>
|   <DIGIT: ["0"-"9"]>
|   <TRUE: "true">
|   <FALSE: "false">
}

/* LITERALS */
TOKEN :
{
    <HEADER_COMMENT: <HEADER> (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
|   <IDENTIFIER: ("_"|<LETTER>)|(("_"<NU>|<LETTER>)(<NU>|"_"<NU>)* (<LETTER>|<DIGIT>("_"|<LETTER>)|<LETTER>"_"))>
|   <NU: <LETTER>|<DIGIT><ND>>
|   <ND: <LETTER>|"_">
}

<*> TOKEN : { <UNKNOWN: ~[" ","\t","\n","\r"]> }



void Start() :
{}
{
    Program() <EOF>
}

void Program() :
{}
{
    HeaderSel() T(PROGRAM) T(LBRACE) Define() Execute() T(RBRACE) IdentifierSel() <EOF>
}

JAVACODE
void T(int tk) {
    token = getNextToken();

    System.out.println("cur tk: " + token.image + " " + token.kind);

    while (token.kind != tk && token != null && token.kind != EOF ){
        errorMessages += "Deu merda! " + token.image + " \n";

        System.out.println("cur tk: " + token.image + " " + token.kind);

        token = getNextToken();
    }

    if(token.kind == EOF){
        System.out.println("teste");
        System.exit(0);
    }
}

void HeaderSel() :
{}
{
    T(HEADER_COMMENT)
|   Epsilon()
}

void IdentifierSel() :
{}
{
    T(IDENTIFIER)
|   Epsilon()
}

void Define() :
{}
{
    T(DEFINE) T(LBRACE) VariableBlock() T(RBRACE)
|   Epsilon()
}

void VariableBlock() :
{}
{
    NotVariable() VariableSel1()
|   Variable() VariableSel2()
|   Epsilon()
}

void VariableSel1() :
{}
{
    Variable()
|   Epsilon()
}

void VariableSel2() :
{}
{
    NotVariable()
|   Epsilon()
}

void Execute() :
{}
{
    T(EXECUTE) CommandBlock()
}

void NotVariable() :
{}
{
    T(NOT) T(VARIABLE)  NotVariableDecl() NotVariableSel()
}

void NotVariableSel() :
{}
{
    NotVariableDecl() NotVariableSel()
|   Epsilon()
}

void NotVariableDecl() :
{}
{
    Type() T(IS) IdentifierListValue()
}

void IdentifierListValue() :
{}
{
    T(IDENTIFIER) Value() IdentifierListValue1()
}

void IdentifierListValue1() :
{}
{
    T(COMMA) IdentifierListValue()
|   Epsilon()
}

void Variable() :
{}
{
    T(VARIABLE) VariableDecl() VariableSel()
}

void VariableSel() :
{}
{
    VariableDecl() VariableSel()
|   Epsilon()
}

void VariableDecl() :
{}
{
    Type() T(IS) IdentifierList() T(DOT)
}

void IdentifierList() :
{}
{
    T(IDENTIFIER) Index() IdentifierList1()
}

void IdentifierList1() :
{}
{
    T(COMMA) IdentifierList()
|   Epsilon()
}

void Set() :
{}
{
    T(SET) Expression() T(TO) IdentifierList()
}

void Get() :
{}
{
    T(GET) T(LBRACE) IdentifierList() T(RBRACE)
}

void Put() :
{}
{
    T(PUT) T(LBRACE) PutList() T(RBRACE)
}

void PutList() :
{}
{
    IdentifierList()
|   Value()
}

void Verify() :
{}
{
    T(VERIFY) Expression() T(IS) FalseTrueSel()
}

void FalseTrueSel() :
{}
{
    TrueBlock() FalseTrueSel1()
|   FalseBlock() FalseTrueSel2()
}

void FalseTrueSel1() :
{}
{
    FalseBlock()
|   Epsilon()
}

void FalseTrueSel2() :
{}
{
    TrueBlock()
|   Epsilon()
}

void TrueBlock() :
{}
{
    T(TRUE) CommandBlock()
}

void FalseBlock() :
{}
{
    T(FALSE) CommandBlock()
}

void Loop() :
{}
{
    T(LOOP) CommandBlock() T(WHILE) Expression() T(IS) T(TRUE)
}

void While() :
{}
{
    T(WHILE) Expression() T(IS) T(TRUE) T(DO) CommandBlock()
}

void CommandBlock() :
{}
{
    T(LBRACE) Command() CommandList() T(RBRACE)
}

void CommandList() :
{}
{
    Command() CommandList()
|   Epsilon()
}

void Command() :
{}
{
    CommandSel() T(DOT)
}

void CommandSel() :
{}
{
    Set()
|   Get()
|   Put()
|   Verify()
|   Loop()
|   While()
}

void Expression() :
{}
{
    ExprArithLogic() ExpressionSel()
}

void ExpressionSel() :
{}
{
    T(EQUAL) ExprArithLogic()
|   T(DIFFERENT) ExprArithLogic()
|   T(SMALLER) ExprArithLogic()
|   T(GREATER) ExprArithLogic()
|   T(SMALLER_EQUAL) ExprArithLogic()
|   T(GREATER_EQUAL) ExprArithLogic()
|   Epsilon()
}

void ExprArithLogic() :
{}
{
    Term2() LessPriority()
}

void LessPriority() :
{}
{
    T(PLUS) Term2() LessPriority()
|   T(MINUS) Term2() LessPriority()
|   T(OR) Term2() LessPriority()
|   Epsilon()
}

void Term2() :
{}
{
    Term1() MidPriority()
}

void MidPriority() :
{}
{
    T(MULTIPLICATION) Term1() MidPriority()
|   T(DIVISION) Term1() MidPriority()
|   T(INTEGER_DIVISION) Term1() MidPriority()
|   T(REST) Term1() MidPriority()
|   T(AND) Term1() MidPriority()
|   Epsilon()
}

void Term1() :
{}
{
    Element() GreatPriority()
}

void GreatPriority() :
{}
{
    T(POWER) Element() GreatPriority()
|   Epsilon()
}

void Element() :
{}
{
    T(IDENTIFIER) Index()
|   Value()
|   T(LPARENTHESES) Expression() T(RPARANTHESES)
|   T(NOT) T(LPARENTHESES) Expression() T(RPARANTHESES)
}

void Index() :
{}
{
    (T(LBRACKET) T(NATURAL_CONST) T(RBRACKET))?
}

void Value() :
{}
{
    T(CHAR_CONST) | T(NATURAL_CONST) | T(REAL_CONST) | T(BOOLEAN_CONST)
}

void Type() :
{}
{
    T(CHAR_TYPE) | T(NATURAL_TYPE) | T(REAL_TYPE) | T(BOOLEAN_TYPE)
}

void Epsilon() : {}
{
     {}
}
