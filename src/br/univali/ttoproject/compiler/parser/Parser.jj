options {
	STATIC = false;
	//ERROR_REPORTING = true;
	//DEBUG_TOKEN_MANAGER = true;
}

PARSER_BEGIN(Parser)

package br.univali.ttoproject.compiler.parser;

public class Parser {

}

PARSER_END(Parser)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| <"//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
}

SKIP: { <"/*"> : BLOCK_COMMENT_STATE}
<BLOCK_COMMENT_STATE> SKIP: { "*/" : DEFAULT  }
<BLOCK_COMMENT_STATE> SKIP: { < ~[] > }

<*> TOKEN :
{
    <EOF>
    {
        if(curLexState == BLOCK_COMMENT_STATE) {
            throw new Error("Unmatched comment at line " + matchedToken.beginLine + ", column " + matchedToken.beginColumn + ".");
        }
    }
}

/* KEY WORDS */
TOKEN [IGNORE_CASE]:
{
  <PROGRAM: "program">
| <DEFINE: "define">
| <NOT: "not">
| <VARIABLE: "variable">
| <IS: "is">
| <NATURAL_TYPE: "natural">
| <REAL_TYPE: "real">
| <CHAR_TYPE: "char">
| <BOOLEAN_TYPE: "boolean">
| <EXECUTE: "execute">
| <SET: "set">
| <TO: "to">
| <GET: "get">
| <PUT: "put">
| <VERIFY: "verify">
| <LOOP: "loop">
| <WHILE: "while">
| <DO: "do">
| <TRUE: "true">
| <FALSE: "false">
}

/* SPECIAL SYMBOLS */
TOKEN :
{
  <HEADER_SYMBOL: ":-">
| <LBRACE: "{">
| <RBRACE: "}">
| <LBRACKET: "[">
| <RBRACKET: "]">
| <LPARENTHESES: "(">
| <RPARANTHESES: ")">
| <DOT: ".">
| <COMMA: ",">
| <PLUS: "+">
| <MINUS: "-">
| <POWER: "**">
| <MULTIPLICATION: "*">
| <DIVISION: "/">
| <INTEGER_DIVISION: "%">
| <REST: "%%">
| <EQUAL: "==">
| <DIFFERENT: "!=">
| <SMALLER: "<">
| <GREATER: ">">
| <SMALLER_EQUAL: "<=">
| <GREATER_EQUAL: ">=">
| <AND: "&">
| <OR: "|">
| <NOT_SYMBOL: "!">
}

/* CONSTS */
TOKEN :
{
    <CHAR_CONST: "\"" ((~["\"","\\","\n","\r"])|("\\"(["n","t","v","b","r","f","a","\\","?","'","\""])))* "\""
               | "\'" ((~["\"","\\","\n","\r"])|("\\"(["n","t","v","b","r","f","a","\\","?","'","\""])))* "\'">
|   <NATURAL_CONST: <DIGIT> (<DIGIT>)? (<DIGIT>)?>
|   <REAL_CONST: <DIGIT> (<DIGIT>)? (<DIGIT>)? (<DIGIT>)? (<DIGIT>)?  "." <DIGIT> (<DIGIT>)?>
|   <BOOLEAN_CONST: <TRUE> | <FALSE>>
}

TOKEN :
{
    <LETTER: ["a"-"z","A"-"Z"]>
|   <DIGIT: ["0"-"9"]>
}

TOKEN :
{
    <HEADER: <HEADER_SYMBOL> (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
|   <IDENTIFIER: "_"|(("_"<NU>|<LETTER>)(<NU>|"_"<NU>)* (<LETTER>|<DIGIT>("_"|<LETTER>)|<LETTER>"_"))>
|   <NU: <LETTER>|<DIGIT><ND>>
|   <ND: <LETTER>|"_">
}

<*> TOKEN : { <UNKNOWN: ~[]> }



void Program() :
{}
{
    HeaderSel() <PROGRAM> <LBRACE> Define() Execute() <RBRACE> IdentifierSel() <EOF>
}

void HeaderSel() :
{}
{
    <HEADER>
|   Epsilon()
}

void IdentifierSel() :
{}
{
    <IDENTIFIER>
|   Epsilon()
}

void Define() :
{}
{
    <DEFINE> <LBRACE> VariableBlock() <RBRACE>
|   Epsilon()
}

void VariableBlock() :
{}
{
    NotVariable() VariableSel1()
|   Variable() VariableSel2()
|   Epsilon()
}

void VariableSel1() :
{}
{
    Variable()
|   Epsilon()
}

void VariableSel2() :
{}
{
    NotVariable()
|   Epsilon()
}

void Execute() :
{}
{
    <EXECUTE> CommandBlock()
}

void NotVariable() :
{}
{
    <NOT> <VARIABLE>  NotVariableDecl() NotVariableSel()
}

void NotVariableSel() :
{}
{
    NotVariableDecl() NotVariableSel()
|   Epsilon()
}

void NotVariableDecl() :
{}
{
    Type() <IS> IdentifierListValue()
}

void IdentifierListValue() :
{}
{
    <IDENTIFIER> Value() IdentifierListValue1()
}

void IdentifierListValue1() :
{}
{
    <COMMA> IdentifierListValue()
|   Epsilon()
}

void Variable() :
{}
{
    <VARIABLE> VariableDecl() VariableSel()
}

void VariableSel() :
{}
{
    VariableDecl() VariableSel()
|   Epsilon()
}

void VariableDecl() :
{}
{
    Type() <IS> IdentifierList() <DOT>
}

void IdentifierList() :
{}
{
    <IDENTIFIER> Index() IdentifierList1()
}

void IdentifierList1() :
{}
{
    <COMMA> IdentifierList()
|   Epsilon()
}

void Set() :
{}
{
    <SET> Expression() <TO> IdentifierList()
}

void Get() :
{}
{
    <GET> <LBRACE> IdentifierList() <RBRACE>
}

void Put() :
{}
{
    <PUT> <LBRACE> IdentifierList() <RBRACE>
}

void Verify() :
{}
{
    <VERIFY> Expression() <IS> FalseTrueSel()
}

void FalseTrueSel() :
{}
{
    TrueBlock() FalseTrueSel1()
|   FalseBlock() FalseTrueSel2()
}

void FalseTrueSel1() :
{}
{
    FalseBlock()
|   Epsilon()
}

void FalseTrueSel2() :
{}
{
    TrueBlock()
|   Epsilon()
}

void TrueBlock() :
{}
{
    <TRUE> CommandBlock()
}

void FalseBlock() :
{}
{
    <FALSE> CommandBlock()
}

void Loop() :
{}
{
    <LOOP> CommandBlock() <WHILE> Expression() <IS> <TRUE>
}

void While() :
{}
{
    <WHILE> Expression() <IS> <TRUE> <DO> CommandBlock()
}

void CommandBlock() :
{}
{
    <LBRACE> Command() CommandList() <RBRACE>
}

void CommandList() :
{}
{
    Command() CommandList()
|   Epsilon()
}

void Command() :
{}
{
    CommandSel() <DOT>
}

void CommandSel() :
{}
{
    Set()
|   Get()
|   Put()
|   Verify()
|   Loop()
|   While()
}

void Expression() :
{}
{
    ExprArithLogic() ExpressionSel()
}

void ExpressionSel() :
{}
{
    <EQUAL> ExprArithLogic()
|   <DIFFERENT> ExprArithLogic()
|   <SMALLER> ExprArithLogic()
|   <GREATER> ExprArithLogic()
|   <SMALLER_EQUAL> ExprArithLogic()
|   <GREATER_EQUAL> ExprArithLogic()
|   <DIFFERENT> ExprArithLogic()
|   Epsilon()
}

void ExprArithLogic() :
{}
{
    Term2() LessPriority()
}

void LessPriority() :
{}
{
    <PLUS> Term2() LessPriority()
|   <MINUS> Term2() LessPriority()
|   <OR> Term2() LessPriority()
|   Epsilon()
}

void Term2() :
{}
{
    Term1() MidPriority()
}

void MidPriority() :
{}
{
    <MULTIPLICATION> Term1() MidPriority()
|   <DIVISION> Term1() MidPriority()
|   <INTEGER_DIVISION> Term1() MidPriority()
|   <REST> Term1() MidPriority()
|   <AND> Term1() MidPriority()
|   Epsilon()
}

void Term1() :
{}
{
    Element() GreatPriority()
}

void GreatPriority() :
{}
{
    <POWER> Element() GreatPriority()
|   Epsilon()
}

void Element() :
{}
{
    <IDENTIFIER> Index()
|   Value()
|   <LPARENTHESES> Expression() <RPARANTHESES>
|   <NOT> <LPARENTHESES> Expression() <RPARANTHESES>
}

void Index() :
{}
{
    (<LBRACKET> <NATURAL_CONST> <RBRACKET>)?
}

void Value() :
{}
{
    <CHAR_CONST> | <NATURAL_CONST> | <REAL_CONST> | <BOOLEAN_CONST>
}

void Type() :
{}
{
    <CHAR_TYPE> | <NATURAL_TYPE> | <REAL_TYPE> | <BOOLEAN_TYPE>
}

void Epsilon() : {}
{
     {}
}
