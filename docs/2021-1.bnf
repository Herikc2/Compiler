<program>               ::= <header> program { <define> <execute> } <program-identifier>

<header>                ::= :- <printable> \n
                         |  ε

<program-identifier>    ::= <identifier>
                         |  ε

<define>                ::= define { <variable-sel> }
                         |  ε

<variable-sel>          ::= <not-variable> <variable-sel-1>
                         |  <variable> <variable-sel-2>
                         |  ε

<variable-sel-1>        ::= <variable>
                         |  ε

<variable-sel-2>        ::= <not-variable>
                         |  ε

<execute>               ::= execute <command-block>

<not-variable>          ::= not variable <not-variable-decl> <not-variable-sel>

<not-variable-sel>      ::= <not-variable-decl> <not-variable-sel>
                         |  ε

<not-variable-decl>     ::= <type> is <identifier-list-value> .

<variable>              ::= variable <variable-decl> <variable-sel>

<variable-sel>          ::= <variable-decl> <variable-sel>
                         |  ε

<variable-decl>         ::= <type> is <identifier-list> .

<type>                  ::= natural
                         |  real
                         |  char
                         |  boolean

<identifier-list-value> ::= <identifier> <value> <identifier-list-value-1>

<identifier-list-value-1> ::= , <identifier-list-value>
                           |  ε

<identifier-list>       ::= <identifier> <index> <identifier-list-1>

<identifier-list-1>     ::= ,  <identifier-list>
                         |  ε

<set>                   ::= set <expression> to <identifier-list>

<get>                   ::= get { <identifier-list> }

<put>                   ::= put { <identifier-list> }

<verify>                ::= verify <expression> <false-true-sel>

<false-true-sel>        ::= <is-true> <false-true-sel-1>
                         |  <is-false> <false-true-sel-2>

<false-true-sel-1>      ::= <is-false>
                         |  ε

<false-true-sel-2>      ::= <is-true>
                         |  ε

<is-true>               ::= is true <command-block>

<is-false>              ::= is false <command-block>

<loop>                  ::= loop <command-block> while <expression> is true

<while>                 ::= while <expression> is true do <command-block>

<command-block>         ::= { <command> <command-list> }

<command-list>          ::= <command> <command-list>
                         |  ε

<command>               ::= <command-sel> .

<command-sel>           ::= <set>
                         |  <get>
                         |  <put>
                         |  <verify>
                         |  <loop>
                         |  <while>

<expression>            ::= <expr-arith-logical> <expression-sel>

<expression-sel>        ::= == <expr-arith-logical>
                         |  != <expr-arith-logical>
                         |  < <expr-arith-logical>
                         |  > <expr-arith-logical>
                         |  <= <expr-arith-logical>
                         |  >= <expr-arith-logical>
                         |  ε

<expr-arith-logical>    ::= <term2> <less-priority>

<less-priority>         ::= + <term2> <less-priority>
                         |  - <term2> <less-priority>
                         |  | <term2> <less-priority>
                         |  ε

<term2>                 ::= <term1> <mid-priority>

<mid-priority>          ::= * <term1> <mid-priority>
                         |  / <term1> <mid-priority>
                         |  % <term1> <mid-priority>
                         |  %% <term1> <mid-priority>
                         |  & <term1> <mid-priority>
                         |  ε

<term1>                 ::= <element> <great-priority>

<great-priority>        ::= ** <element> <great-priority>
                         |  ε

<element>               ::= identificador <index>
                         |  <value>
                         |  ( <expression> )
                         |  ! ( <expression> )

<index>                 ::= [ <natural> ]
                         |  ε

<value>                 ::= <natural>
                         |  <real>
                         |  <char>
                         |  <boolean>

/* ------------------------------------------------------------------------------------------------------------------- */

Vt = { 
    program
    define
    not
    variable
    is natural
    real
    char
    boolean
    execute
    set
    get
    to
    put
    loop
    while
    do
    true
    false
    {
    }
    [
    ]
    ,
    +
    -
    *
    /
    **
    %
    %%
    ==
    !=
    <
    >
    <=
    >=
    &
    |
    !
    (
    )
    .
}
